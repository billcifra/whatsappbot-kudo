# ---------------------------------------------
# Configuraci√≥n e importaci√≥n de dependencias
# ---------------------------------------------
from flask import Flask, request
import requests
import os
import time
from dotenv import load_dotenv
from openai import OpenAI
import gspread
from google.oauth2.service_account import Credentials
import json
from google.auth.transport.requests import Request

# Cargar variables de entorno desde archivo .env
load_dotenv()

# Inicializaci√≥n de la app Flask
app = Flask(__name__)

# Diccionario para almacenar contexto por usuario (tema y tiempo)
contexto_usuarios = {}

# Cargar credenciales desde variables de entorno
WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_KEY = os.getenv("GOOGLE_SHEET_KEY")
credentials_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))

# Cliente de OpenAI
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# Cliente de Google Sheets
scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(credentials_dict, scopes=scope)
gs_client = gspread.authorize(creds)
solicitudes_sheet = gs_client.open_by_key(GOOGLE_SHEET_KEY).worksheet("SolicitudesHumano")
interesados_sheet = gs_client.open_by_key(GOOGLE_SHEET_KEY).worksheet("Interesados")

# ---------------------------------------------
# Definici√≥n de intenciones y respuestas directas
# ---------------------------------------------

intenciones = {"1": ["horarios", "hora", "a qu√© hora", "qu√© d√≠as", "qu√© horario"],
               "2": ["precio", "cu√°nto cuesta", "cu√°nto cobran", "tarifa", "vale", "costo"],
               "3": ["qu√© ense√±an", "disciplinas", "qu√© clases hay", "qu√© actividades"],
               "4": ["inscribir", "inscripci√≥n", "c√≥mo me apunto", "c√≥mo me inscribo", "registrarme"],
               "5": ["d√≥nde est√°n", "direcci√≥n", "ubicaci√≥n", "d√≥nde queda", "c√≥mo llegar"]
               }

respuestas_directas = {"1": "üëâ *Horarios de clases en KUDO Bolivia:*\n‚Ä¢ *Kudo Ni√±os (7 a 13 a√±os):"
                            "*\n\t*Martes y Jueves* 8:45‚Äì10:00 y \n\t16:30‚Äì18:00 | \n\t*S√°bados* 11:15‚Äì12:45\n‚Ä¢ "
                            "*Kudo Jovenes y Adultos:*\n\t*Martes y Jueves* 8:45‚Äì10:00 y \n\t19:30‚Äì21:00 | "
                            "\n\t*S√°bado 10:00‚Äì11:15*\n‚Ä¢ *Brazilian Jiu Jitsu:*\n\t *Lunes, Mi√©rcoles y Viernes* "
                            "\n\t17:00‚Äì18:30 y 19:30‚Äì21:00",
                       "2": "üëâ *Precios:*\nBs. 250 por persona. Consulta por descuentos directamente con el "
                            "equipo del dojo.",
                       "3": "üëâ *Disciplinas que ofrecemos:*\nü•ã Kudo\n\tQue es KUDO: "
                            "https://www.youtube.com/watch?v=NqcE1J7z2eE\n\nü•ã Brazilian Jiu-Jitsu\n\t"
                            "Que es BJJ: https://www.youtube.com/watch?v=tztK3dJksk0",
                       "4": "üëâ *¬øC√≥mo inscribirte?*\nAcercate al dojo para poder inscribirte. "
                            "¬°Estamos disponibles para recibirte!\n\nü•ã¬°Tienes una clase de prueba gratis en "
                            "todas nuestras disciplinas!",
                       "5": "üìç *Ubicaci√≥n de KUDO Bolivia:*\nEdificio ex-Hotel Plaza, Av. 16 de Julio - Prado, "
                            "La Paz, Bolivia,\ningreso gradas del colegio Don bosco\n\n"
                            "üìåMapa: https://maps.app.goo.gl/CoJ7eoVns5tckgPv7"
                       }

# Men√∫ adicional que se agrega al final de cada mensaje
menu = ("\n\nüìã ¬øSobre qu√© m√°s te gustar√≠a saber?\n"
        "1Ô∏è‚É£ Horarios\n2Ô∏è‚É£ Precios\n3Ô∏è‚É£ Disciplinas\n4Ô∏è‚É£ Inscripci√≥n\n5Ô∏è‚É£ Ubicaci√≥n")

# Palabras clave para atenci√≥n humana
hablar_con_humano = ["hablar con alguien",
                     "necesito ayuda",
                     "quiero hablar con una persona",
                     "me ayudan", "me pueden ayudar",
                     "humano",
                     "persona",
                     "atenci√≥n humana"
                     ]

# Lista de n√∫meros a notificar en caso de solicitud de atenci√≥n humana
notificar_humanos = ["59179598641", "59176785574"]


# ---------------------------------------------
# Funciones auxiliares
# ---------------------------------------------

def send_message(text, phone):
    """Env√≠a un mensaje de texto por la API de WhatsApp"""
    url = f"https://graph.facebook.com/v18.0/{PHONE_NUMBER_ID}/messages"
    headers = {"Authorization": f"Bearer {WHATSAPP_TOKEN}",
               "Content-Type": "application/json"
               }
    payload = {"messaging_product": "whatsapp",
               "to": phone,
               "type": "text",
               "text": {"body": text}
               }
    response = requests.post(url, headers=headers, json=payload)
    print("[INFO] WhatsApp API response:", response.status_code, response.text)


def registrar_interesado(phone, message):
    fecha = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    interesados_sheet.append_row([phone, message, fecha])


def registrar_solicitud_humana(phone, message):
    fecha = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    solicitudes_sheet.append_row([phone, message, fecha])

# ---------------------------------------------
# Webhooks
# ---------------------------------------------


@app.route("/webhook", methods=["GET"])
def verify():
    """Verificaci√≥n inicial del webhook con Meta"""
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == "mibotverificacion":
        return challenge, 200
    return "Error de verificaci√≥n", 403


@app.route("/webhook", methods=["POST"])
def webhook():
    """Manejo de mensajes entrantes de WhatsApp"""
    data = request.get_json()
    try:
        entry = data.get("entry", [])[0]
        changes = entry.get("changes", [])[0]
        value = changes.get("value", {})

        if "messages" in value:
            # Ignorar mensajes provenientes de grupos
            if "-" in value["messages"][0].get("from", ""):
                print("[INFO] Mensaje ignorado: proviene de un grupo de WhatsApp.")
                return "ok", 200
            # Se define m√°s abajo si es necesario, para no interferir con la detecci√≥n real de usuario nuevo
            message = value["messages"][0]
            user_msg = message["text"]["body"]
            user_phone = message["from"]
            ahora = time.time()

            msg_lower = user_msg.lower()  # Centralizado aqu√≠ una vez

            # Limpiar sesi√≥n si pas√≥ m√°s de 30 minutos
            if user_phone in contexto_usuarios:
                user_data = contexto_usuarios[user_phone]
                if "timestamp" in user_data and ahora - user_data["timestamp"] > 1800:
                    del contexto_usuarios[user_phone]

            print(f"[INFO] Mensaje recibido: {user_msg} de {user_phone}")

            # Detectar solicitud de atenci√≥n humana
            if any(frase in msg_lower for frase in hablar_con_humano):
                registrar_solicitud_humana(user_phone, user_msg)
                send_message("¬°Claro! Alguien del equipo de KUDO Bolivia se pondr√° en contacto contigo."
                             , user_phone)
                for admin_phone in notificar_humanos:
                    send_message(f"üì© Solicitud de atenci√≥n humana del n√∫mero: {user_phone}\nMensaje: {user_msg}",
                                 admin_phone)
                return "ok", 200

            # Revisar si el mensaje es un n√∫mero de opci√≥n directa
            if user_msg.strip() in respuestas_directas:
                key = user_msg.strip()
                contexto_usuarios[user_phone] = {"tema": key, "timestamp": ahora}
                send_message(respuestas_directas[key] + menu, user_phone)
                return "ok", 200

            # Revisar si el mensaje coincide con alguna intenci√≥n textual
            for key, frases in intenciones.items():
                if any(frase in msg_lower for frase in frases):
                    contexto_usuarios[user_phone] = {"tema": key, "timestamp": ahora}
                    send_message(respuestas_directas[key] + menu, user_phone)
                    return "ok", 200

            # Fallback al modelo GPT si no se detect√≥ ninguna intenci√≥n conocida
            es_nuevo = user_phone not in contexto_usuarios

            # Si es nuevo, se registra ahora
            if es_nuevo:
                contexto_usuarios[user_phone] = {"tema": None, "timestamp": ahora}
            prompt = (
                "Eres un asistente virtual del centro de artes marciales *KUDO Bolivia*, ubicado en el edificio"
                "ex-Hotel Plaza, La Paz, Bolivia. Tu objetivo es informar de manera clara, respetuosa y profesional "
                "a quienes consultan por WhatsApp."
                "üèÜ En KUDO Bolivia se ense√±an tres disciplinas: *Kudo*, *Jiu-Jitsu brasile√±o (BJJ)* y *Defensa "
                "Personal*."
                "ü•ã *¬øQu√© es Kudo?*"
                "Kudo es un arte marcial japon√©s moderno y completo que combina golpes a contacto completo, "
                "lanzamientos, controles y t√©cnicas de sumisi√≥n en el suelo. Es un Budo moderno con valores "
                "educativos, espirituales y de respeto, que enfatiza la formaci√≥n del car√°cter, la superaci√≥n y la "
                "cortes√≠a (Reigi)."
                "Se practica en m√°s de 50 pa√≠ses y celebra campeonatos mundiales cada cuatro a√±os. Fue creado por "
                "el maestro *Azuma Takashi*."
                "Filos√≥ficamente se basa en tres conceptos:"
                "‚Ä¢ *Transitoriedad* (nada es permanente),"
                "‚Ä¢ *Interdependencia* (todo se conecta), y"
                "‚Ä¢ *Mente abierta* (imparcialidad, humildad y crecimiento constante)."
                "üìπ Videos recomendados:"
                "‚Ä¢ ¬øQu√© es Kudo?: https://www.youtube.com/watch?v=NqcE1J7z2eE&"
                "‚Ä¢ Highlights: https://www.youtube.com/watch?v=JtTWeISoAFA&"
                "‚Ä¢ Mundial 2023: https://www.youtube.com/watch?v=jfcne0M5qEU"
                "üåê Web oficial de la Federacion Internacional de Kudo (KIF): https://ku-do.org/"
                "üìò Facebook Bolivia: https://www.facebook.com/profile.php?id=100032041972221"
                "üóìÔ∏è Pr√≥ximos eventos KIF: https://ku-do.org/news/"
                "üìå Sobre KUDO Bolivia:"
                "KUDO Bolivia fue constituida oficialmente en abril de 2021. El *Branch Chief* de KUDO en Bolivia es el"
                " Sensei *Jos√© Manuel Rioja Claure*, 2¬∫ DAN en Kudo. Desde su creaci√≥n, Bolivia ha tenido presencia "
                "internacional, participando oficialmente en el Panamericano de Brasil y en el Mundial "
                "de Jap√≥n en 2023."
                "ü•ã *¬øQu√© es Jiu-Jitsu Brasile√±o (BJJ)?*"
                "Es un arte marcial enfocado en el combate cuerpo a cuerpo en el suelo, con t√©cnicas como llaves y"
                " estrangulamientos. Promueve la t√©cnica sobre la fuerza y el control del oponente."
                "üé• Video explicativo: https://www.youtube.com/watch?v=tztK3dJksk0"
                "üßç‚Äç‚ôÇÔ∏è *Edades y niveles*: Hay clases para todas las edades, desde ni√±os hasta adultos. "
                "No se necesita experiencia previa."
                "üÜì *Clase de prueba*: Los interesados pueden asistir a una clase gratuita antes de inscribirse."
                "üß• *Indumentaria*: Se recomienda usar ropa deportiva c√≥moda. En el caso de clases regulares, "
                "se utilizar√° equipamiento b√°sico como gi (kimono), guantes y protector facial seg√∫n la disciplina."
                "üìù Si alguien pregunta por horarios, precios, inscripci√≥n o ubicaci√≥n, ofrece primero el siguiente "
                "men√∫:"
                "1Ô∏è‚É£ Horarios"
                "2Ô∏è‚É£ Precios"
                "3Ô∏è‚É£ Disciplinas"
                "4Ô∏è‚É£ Inscripci√≥n"
                "5Ô∏è‚É£ Ubicaci√≥n"
                "Siempre responde en espa√±ol neutro, como si fueras parte del equipo de KUDO Bolivia. Si no conoces"
                " la respuesta exacta, invita amablemente a visitar el dojo."
            )
            if not es_nuevo:
                prompt += " No inicies con saludos."

            response = client.responses.create(model="gpt-4.1",
                                               instructions=prompt,
                                               input=user_msg,
                                               )
            texto = response.output_text
            contexto_usuarios[user_phone] = {"tema": "libre", "timestamp": ahora}
            registrar_interesado(user_phone, user_msg)
            send_message(texto, user_phone)

    except Exception as e:
        print("Error:", e)

    return "ok", 200


# ---------------------------------------------
# Inicio del servidor Flask
# ---------------------------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
